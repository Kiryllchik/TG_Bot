from collections.abc import Awaitable
import logging
import telebot
from telebot import types
import datetime
import locale
import sqlite3
import asyncio
from aiocron import crontab
from keep_alive import keep_alive

keep_alive()
logging.basicConfig(level=logging.INFO)
#locale.setlocale(locale.LC_TIME, 'uk_UA.UTF-8')

bot = telebot.TeleBot('6646599481:AAFzQo1xgauCXLmXQnJBTBKmZHCae0FHUPs')


def insert(message):
    global conn, cursor, idn
    idn = message.from_user.username
    conn = sqlite3.connect('base.bd')
    cursor = conn.cursor()
    cursor.execute(f'''CREATE TABLE IF NOT EXISTS {idn} 
                 (new_words TEXT, 
                 data_new_words DATA, 
                 data_next_rep DATA, 
                 amount_of_rep INTEGER, 
                 complete_words INTEGER)''')
    conn.commit()


def curr_date():
    global current_date
    current_date = datetime.datetime.now()
    #("%d/%m/%Y")


def id_user(message):
    global chat_id, info_user
    chat_id = message.from_user.id
    info_user = message


'''
 –ö–û–ú–ê–ù–î–ê /START
'''


@bot.message_handler(commands=['start'])
def start(message):

    id_user(message)
    bot.send_message(
        chat_id,
        f'–ü—Ä–∏–≤—ñ—Ç, {message.from_user.username}‚ù§Ô∏è! –í—Å–µ —â–µ –ø–∞–º º—è—Ç–∞—î—à –ø—Ä–æ –º–µ–Ω–µ? ü•π'
    )
    # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è 2
    bot.send_message(chat_id, '–¢–æ–¥—ñ —Ä—É—à–∞–π–º–æ –¥–æ –∑—Ä–æ—Å—Ç—Éüìàüìà üòÅ')
    # –ö–Ω–æ–ø–∫–∏
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton('–†–æ–∑–∫–ª–∞–¥ –ø–∞—Ä üóìÔ∏è', callback_data='data'))
    markup.add(
        types.InlineKeyboardButton('–ê–Ω–≥–ª—ñ–π—Å—å–∫–∞ –º–æ–≤–∞', callback_data='english'))
    markup.add(
        types.InlineKeyboardButton('///–ü–æ–≤—Ç–æ—Ä–∏—Ç–∏ –≤–ª–∞—Å–Ω—ñ –∫–æ–Ω—Å–ø–µ–∫—Ç–∏///',
                                   callback_data='repeat'))
    markup.add(
        types.InlineKeyboardButton('///–ù–∞–≤—á–∞–Ω–Ω—è. –§—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω–∏–π –º–µ—Ç–æ–¥.///',
                                   callback_data='studying'))
    # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è 3
    bot.send_message(chat_id, '–©–æ —Ç–∏ —Ö–æ—á–µ—à –∑—Ä–æ–±–∏—Ç–∏?', reply_markup=markup)


'''
'''
'''–î–ê–ù–Ü –î–õ–Ø –ö–û–ú–ê–ù–î–ò /DATA'''
# –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É –¥–∞—Ç—É
current_dato = datetime.datetime.now()
tomorrow = current_dato + datetime.timedelta(days=1)
# –í–∏–≤–æ–¥–∏–º–æ –Ω–∞–∑–≤—É —Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—å–æ–≥–æ –¥–Ω—è
day_name = tomorrow.strftime("%A")
# –í–∏–∑–Ω–∞—á–∞—î–º–æ –Ω–æ–º–µ—Ä –¥–Ω—è —Ç–∏–∂–Ω—è (–ø–æ–Ω–µ–¥—ñ–ª–æ–∫ - 0, –≤—ñ–≤—Ç–æ—Ä–æ–∫ - 1, ..., –Ω–µ–¥—ñ–ª—è - 6)
day_of_week = current_dato.weekday()
day_of_week += 1

# –°–ø–∏—Å–æ–∫ –ø–æ—Å–∏–ª–∞–Ω—å –Ω–∞ —Ñ–æ—Ç–æ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –¥–Ω—è —Ç–∏–∂–Ω—è
photos = [
    './photo/monday.jpg',
    './photo/tuesday.jpg',
    './photo/wednesday.jpg',
    './photo/thursday.jpg',
    './photo/friday.jpg',
]
# –î–ª—è –≤–∏–±–æ—Ä—É —ñ–Ω—à–æ–≥–æ –¥–Ω—è –≤ /DATA
calendar = ['–ø–æ–Ω–µ–¥—ñ–ª–æ–∫', '–≤—ñ–≤—Ç–æ—Ä–æ–∫', '—Å–µ—Ä–µ–¥–∞', '—á–µ—Ç–≤–µ—Ä', '–ø º—è—Ç–Ω–∏—Ü—è']
'''
–ö–û–ú–ê–ù–î–ê /DATA
'''


# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥–∏ /data
@bot.message_handler(commands=['data'])
def daily_photo(message):
    id_user(message)
    if 0 <= day_of_week < len(photos):
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ñ–æ—Ç–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –¥–Ω—è —Ç–∏–∂–Ω—è
        bot.send_message(chat_id,
                         f'–†–æ–∑–∫–ª–∞–¥ –ø–∞—Ä —É <b>{day_name.upper()}</b>',
                         parse_mode='html')
        bot.send_photo(chat_id, open(photos[day_of_week], 'rb'))

        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –≤–∏–±–æ—Ä—É —ñ–Ω—à–æ–≥–æ –¥–Ω—è
        markup = types.InlineKeyboardMarkup()
        for i in range(5):
            markup.add(
                types.InlineKeyboardButton(calendar[i].upper(),
                                           callback_data=calendar[i]))
        bot.send_message(chat_id,
                         "–ú–æ–∂–ª–∏–≤–æ —ñ–Ω—à–∏–π –¥–µ–Ω—å: ‚ò∫Ô∏è",
                         reply_markup=markup)
    else:
        # –ü–æ–≤—Ç–æ—Ä—é—î–º —Ü–∏–∫–ª –æ—Å–∫—ñ–ª—å–∫–∏ –≤ if –≤—ñ–Ω –Ω–µ —Å–ø—Ä–∞—Ü—å–æ–≤—É—î –∫–æ–ª–∏ –∞–∫—Ç–∏–≤—É—î—Ç—å—Å—è else
        markup = types.InlineKeyboardMarkup()
        for i in range(5):
            markup.add(
                types.InlineKeyboardButton(calendar[i].upper(),
                                           callback_data=calendar[i]))
        bot.send_message(chat_id,
                         f'–†–æ–∑–∫–ª–∞–¥ –ø–∞—Ä —É <b>–ü–û–ù–ï–î–Ü–õ–û–ö</b>',
                         parse_mode='html')
        bot.send_photo(chat_id, open(photos[0], 'rb'))

        bot.send_message(chat_id,
                         "–ú–æ–∂–ª–∏–≤–æ —ñ–Ω—à–∏–π –¥–µ–Ω—å: ‚ò∫Ô∏è",
                         reply_markup=markup)


'''
'''
'''CALLBACK –î–õ–Ø –ö–ù–û–ü–û–ö –í /DATA'''


# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –≤–∏–±–æ—Ä—É —ñ–Ω—à–æ–≥–æ –¥–Ω—è –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
@bot.callback_query_handler(func=lambda callback: callback.data in calendar)
def callback_daily_photo(callback):
    selected_day = callback.data
    # –í–∏–∫–ª–∏–∫ —Ñ—É–Ω—Ü—ñ—ó, —è–∫–∞ –Ω–∞–¥—Å–∏–ª–∞—î —Ñ–æ—Ç–æ –≤–∏–±–æ—Ä–∞–Ω–æ–≥–æ –¥–Ω—è

    set_daily_photo(callback.message, selected_day)


    #set_daily_photo, —è–∫–∏–π –ø—Ä–∏–π–º–∞—î –æ–±—Ä–∞–Ω–∏–π –¥–µ–Ω—å —ñ –≤–∏–≤–æ–¥–∏—Ç—å —Ñ–æ—Ç–æ
def set_daily_photo(message, selected_day=None):
    if selected_day in calendar:
        markup = types.InlineKeyboardMarkup()
        for i in range(5):
            markup.add(
                types.InlineKeyboardButton(calendar[i].upper(),
                                           callback_data=calendar[i]))

        selected_day_index = calendar.index(selected_day)
        bot.send_message(
            message.chat.id,
            f'–†–æ–∑–∫–ª–∞–¥ –ø–∞—Ä —É <b>{calendar[selected_day_index].upper()}</b>',
            parse_mode='html')
        bot.send_photo(message.chat.id,
                       open(photos[selected_day_index], 'rb'),
                       reply_markup=markup)


'''
–ö–û–ú–ê–ù–î–ê /REPEAT
'''


@bot.message_handler(commands=['repeat'])
def repeat(message):
    id_user(message)
    # –¶–∏–∫–ª —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø–æ–∑–Ω–∞—á–µ–Ω–Ω—è –¥–Ω—è –º—ñ—Å—è—Ü—è

    keyboard = types.InlineKeyboardMarkup(row_width=4)
    month = 31
    row = []
    for i in range(1, month):
        button = types.InlineKeyboardButton(f'{str(i)}.10.üï∞Ô∏è',
                                            callback_data=str(i))
        row.append(button)
        # –î–æ–¥–∞–≤–∞–Ω–Ω—è < —Ç–∞ >
        if i == 28:
            btn_left = (types.InlineKeyboardButton('<', callback_data='left'))
            btn_right = (types.InlineKeyboardButton('>',
                                                    callback_data='right'))
            row.append(btn_left)
        elif i == 30:
            row.append(btn_right)
    keyboard.add(*row)

    # –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    bot.send_message(chat_id,
                     '–û—Å—å —è–∫—ñ –∑–∞–≤–¥–∞–Ω–Ω—è —Ç–æ–±—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ —Å—å–æ–≥–æ–¥–Ω—ñ: üòò',
                     reply_markup=keyboard)


'''
'''
numbers = []
for i in range(30):
    numbers.append(str(i))
'''–†–û–ó–î–Ü–õ –ê–ù–ì–õ–Ü–ô–°–ö–ê –ú–û–í–ê.
   –¢–£–¢ –ë–û–¢ –î–û–ü–û–ú–ê–ì–ê–¢–ò–ú–ï –ó–ê–ü–ê–ú–Ø–¢–û–í–£–í–ê–¢–ò –ê–ù–ì–õ–Ü–ô–°–¨–ö–Ü –°–õ–û–í–ê'''


@bot.message_handler(commands=['english'])
def english_form(message):
    id_user(message)
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton('–î–æ–¥–∞—Ç–∏ –Ω–æ–≤—ñ —Å–ª–æ–≤–∞', callback_data='words'))
    markup.add(types.InlineKeyboardButton('–í—Å—ñ —Å–ª–æ–≤–∞', callback_data='learn'))
    markup.add(
        types.InlineKeyboardButton('–°–ª–æ–≤–∞ –¥–æ–¥–∞–Ω—ñ —Å—å–æ–≥–æ–¥–Ω—ñ',
                                   callback_data='added_today'))
    markup.add(
        types.InlineKeyboardButton('–ü–æ–≤—Ç–æ—Ä–∏—Ç–∏ —Å–ª–æ–≤–∞ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ',
                                   callback_data='rep_word'))
    markup.add(
        types.InlineKeyboardButton('–ü–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è –±–µ–∑ –∑–∞–ø–∏—Å—É',
                                   callback_data='teach'))
    markup.add(
        types.InlineKeyboardButton('–í–∏–≤—á–µ–Ω—ñ —Å–ª–æ–≤–∞', callback_data='complete'))

    bot.send_message(chat_id,
                     '–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é –¥–ª—è –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó –º–æ–≤–∏',
                     reply_markup=markup)


@crontab('* 12 * *')
async def time_message():
    global chat_id
    if chat_id:
        await bot.send_message(
            chat_id,
            '–ú–æ—î —Å–µ—Ä–¥–µ–Ω—å–∫–æ‚ù§Ô∏è, Are you ready for RISE!? \nLet`s start!')
        await bot.send_message(chat_id, '–ù–∞–¥—Å–∏–ª–∞–π /rep_word i –ø–æ–≥–Ω–∞–ª–∏üòâ')


'''–ö–û–ú–ê–î–ù–ê /WORDS'''


@bot.message_handler(commands=['words'])
def words(message):
    id_user(message)
    bot.send_message(
        chat_id,
        '–í–≤–µ–¥—ñ—Ç—å —Å–ª–æ–≤–æ, —è–∫–µ —Ö–æ—á–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç–∏ (–∞–±–æ "end", —â–æ–± –∑–∞–≤–µ—Ä—à–∏—Ç–∏): ')
    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
    bot.register_next_step_handler(message, process_words)


# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –î–û–î–ê–í–ê–ù–ù–Ø –ù–û–í–ò–• –°–õ–Ü–í
def process_words(message):
    if message.text.lower() == 'end':
        # –ö–æ–º–∞–Ω–¥–∞ "end" –∑–∞–≤–µ—Ä—à—É—î –≤–≤–µ–¥–µ–Ω–Ω—è —Å–ª—ñ–≤
        show_words(message)
    else:
        insert(message)
        cursor.execute(f'SELECT new_words FROM {idn} WHERE new_words = ?',
                       (message.text, ))
        existing_word = cursor.fetchone()

        if existing_word:
            bot.send_message(chat_id,
                             f'–°–ª–æ–≤–æ "{message.text}" –≤–∂–µ —î –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö.')
        else:
            # –î–æ–¥–∞—î–º–æ —Å–ª–æ–≤–æ –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
            curr_date()
            next_dat = (current_date +
                        datetime.timedelta(days=1)).strftime("%d/%m/%Y")
            cursor.execute(
                f'INSERT INTO {idn} (new_words, data_new_words, data_next_rep, amount_of_rep) VALUES (?, ?, ?, ?)',
                (message.text, current_date.strftime("%d/%m/%Y"), next_dat, 0))
            conn.commit()
            # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—à–Ω–µ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Å–ª–æ–≤–∞
            bot.send_message(chat_id,
                             f'–°–ª–æ–≤–æ "{message.text}" —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ.')
            # –ó–∞–ø–∏—Ç –Ω–∞ –≤–≤–µ–¥–µ–Ω–Ω—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Å–ª–æ–≤–∞
        bot.send_message(chat_id,
                         '–í–≤–µ–¥—ñ—Ç—å —â–µ –æ–¥–Ω–µ —Å–ª–æ–≤–æ (–∞–±–æ "end", —â–æ–± –∑–∞–≤–µ—Ä—à–∏—Ç–∏): ')
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Å–ª–æ–≤–∞
        bot.register_next_step_handler(message, process_words)


# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –í–Ü–î–û–ë–†–ê–ñ–ï–ù–ù–Ø –î–û–î–ê–ù–ò–• –°–õ–Ü–í –°–¨–û–ì–û–î–ù–Ü
@bot.message_handler(commands=['added_today'])
def show_words(message):
    id_user(message)
    insert(message)
    curr_date()
    cursor.execute(
        f'SELECT new_words FROM {idn} WHERE complete_words IS NULL AND data_new_words = ?',
        (current_date.strftime("%d/%m/%Y"), ))

    data = cursor.fetchall()
    words = [word[0] for word in data]
    if words and all(word is not None and isinstance(word, str)
                     for word in words):
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å–ª–æ–≤–∞, —è–∫—â–æ –≤–æ–Ω–∏ –±—É–ª–∏ –¥–æ–¥–∞–Ω—ñ
        bot.send_message(
            chat_id, f'–°–ª–æ–≤–∞, —è–∫—ñ –≤–∏ –¥–æ–±–∞–≤–∏–ª–∏ —Å—å–æ–≥–æ–¥–Ω—ñ:\n' + '\n'.join(words))
    else:
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫—â–æ —Å—å–æ–≥–æ–¥–Ω—ñ –Ω–µ –±—É–ª–æ –¥–æ–¥–∞–Ω–∏—Ö —Å–ª—ñ–≤
        bot.send_message(chat_id,
                         '–ù–∞ –∂–∞–ª—å, —Å—å–æ–≥–æ–¥–Ω—ñ –≤–∏ –Ω–µ –¥–æ–¥–∞–ª–∏ –∂–æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞.')
    # –î—ñ–∑–Ω–∞—é—Å—å —è–∫–∏–π —Å—å–æ–≥–æ–¥–Ω—ñ –¥–µ–Ω—å –∑ 365
    daysend = current_dato.timetuple().tm_yday
    goal = 300
    button = types.InlineKeyboardMarkup()
    button.add(
        types.InlineKeyboardButton('–ü–æ–≤—Ç–æ—Ä–∏—Ç–∏ —Å–ª–æ–≤–∞', callback_data='teach'))

    cursor.execute(f'SELECT complete_words FROM {idn} WHERE new_words IS NULL')
    complete = cursor.fetchall()
    bot.send_message(chat_id,
                     '///–ú–æ–∂–ª–∏–≤—ñ—Å—Ç—å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–ª–∞—Å–Ω–∏—Ö —Ü—ñ–ª–µ–π, —É —Ä–æ–∑—Ä–æ–±—Ü—ñ///')
    words = [word[0] for word in complete]
    bot.send_message(
        chat_id,
        '–¢–≤–æ—è —Ü—ñ–ª—å –≤—á–∏—Ç–∏ 5 —Å–ª—ñ–≤ —É –¥–µ–Ω—å. –¢–æ–¥—ñ —Ç–∏ –∑–º–æ–∂–µ—à –¥–æ –∫—ñ–Ω—Ü—è —Ä–æ–∫—É –≤–∏–≤—á–∏—Ç–∏ –±—ñ–ª—å—à–µ –Ω—ñ–∂ 300 —Å–ª—ñ–≤üòçüòò\n –ü—Ä–∏–±–ª–∏–∑–Ω–æ –∑–∞ 60 –¥–Ω—ñ–≤ü•≥ \n –°–ª–æ–≤–∞ —Ç—Ä–µ–±–∞ –ø–æ–≤—Ç–æ—Ä—é–≤–∞—Ç–∏ —ñ —Ç–∏ —Ü–µ –±—É–¥–µ—à —Ä–æ–±–∏—Ç–∏ 5 —Ä–∞–∑—ñ–≤ –¥–ª—è —Å–ª–æ–≤–∞, –∞ —Ç–∞–∫–æ–∂ –±—É–¥–µ—à –ø—Ä–∏–¥—É–º—É–≤–∞—Ç–∏ –¥–æ –Ω—å–æ–≥–æ —Ä–µ—á–µ–Ω–Ω—è.'
    )
    bot.send_message(chat_id,
                     f'–î–æ –∫—ñ–Ω—Ü—è —Ä–æ–∫—É <b>{str(365 - int(daysend))}</b>',
                     parse_mode='html')

    bot.send_message(chat_id,
                     f'–ö—ñ–ª—å–∫—ñ—Å—Ç—å –≤–∏–≤—á–µ–Ω–∏—Ö —Å–ª—ñ–≤: <b>{str(len(words))}</b>',
                     parse_mode='html')
    bot.send_message(
        chat_id,
        f'–©–µ —Ç—Ä–µ–±–∞ –≤–∏–≤—á–∏—Ç–∏ —Å–ª—ñ–≤: <b>{str(int(goal)-int(len(words)))}</b>',
        parse_mode='html',
        reply_markup=button)
    cursor.close()
    conn.close()


#–ü–û–ö–ê–ó–ê–¢–ò, –¢–ï –©–û –í–ß–ò–®
@bot.message_handler(commands=['learn'])
def new_words(message):
    id_user(message)
    insert(message)
    cursor.execute(
        f'SELECT new_words, data_new_words, data_next_rep, amount_of_rep FROM {idn}'
    )
    complete = cursor.fetchall()

    message_text = ""
    for row in complete:
        wordo = row[0]
        data_creat = row[1]
        data_next_repeat = row[2]
        amount = row[3]
        message_text += (f"–°–ª–æ–≤–æ: <b>{wordo}</b>\n"
                         f"–î–∞—Ç–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è: {data_creat}\n"
                         f"–ù–∞—Å—Ç—É–ø–Ω–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è: {data_next_repeat}\n"
                         f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω—å: <b>{amount}/6</b>\n"
                         "__________\n\n\n")

    # –û–±'—î–¥–Ω–∞–Ω–Ω—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Ç–∞ —Ä—è–¥–∫—ñ–≤ –¥–ª—è –≤–∏–≤–µ–¥–µ–Ω–Ω—è
    bot.send_message(chat_id,
                     f'–°–ª–æ–≤–∞, —è–∫—ñ —Ç–∏ –≤—á–∏—à:\n{message_text}',
                     parse_mode='html')


#–ü–û–ö–ê–ó–ê–¢–ò –¢–ï, –©–û –ú–û–ñ–ù–ê –°–¨–û–ì–û–ù–Ü –ü–û–í–¢–û–†–ò–¢–ò
@bot.message_handler(commands=['rep_word'])
def repeat_words(message):
    id_user(message)
    insert(message)
    curr_date()
    global wordso, worder
    cursor.execute(f'SELECT new_words, data_next_rep FROM {idn}')
    complete = cursor.fetchall()
    # worder –∫–æ–ø—ñ—è —â–æ–± wordso –∑–∞–ª–∏—à–∏–ª–æ—Å—å —Ü—ñ–ª–∏–º, —ñ –º–æ–∂–Ω–∞ –±—É–ª–æ –≤–∏–≤–µ—Å—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—Ö —Å–ª—ñ–≤.
    global selected_words
    selected_words = []
    for row in complete:
        db_date = datetime.datetime.strptime(
            row[1], "%d/%m/%Y")  # –ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä—è–¥–∫–∞ —É datetime
        if db_date <= current_date:
            selected_words.append(row[0])

    if complete:
        button = types.InlineKeyboardMarkup()
        button.add(
            types.InlineKeyboardButton('–ü–æ—á–∞—Ç–∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è',
                                       callback_data='start_rep_word'))
        bot.send_message(
            chat_id,
            '–û—Å—å —Å–ª–æ–≤–∞, —è–∫—ñ —Ç–∏ –º–æ–∂–µ—à –ø–æ–≤—Ç–æ—Ä–∏—Ç–∏ —Å—å–æ–≥–æ–¥–Ω—ñ:\n' +
            '\n'.join([f'<b>{word}</b>' for word in selected_words]),
            parse_mode='html',
            reply_markup=button)
        bot.send_message(
            chat_id,
            '–ü–∞–º º—è—Ç–∞–π, —É –±–æ—Ç–∞ —Ç–æ–±—ñ –Ω—ñ—á–æ–≥–æ –ø–∏—Å–∞—Ç–∏ –Ω–µ —Ç—Ä–µ–±–∞ (–º–æ–∂–ª–∏–≤–æ —Ü–µ —Ç–∏–º—á–∞—Å–æ–≤–æ ü§∑‚Äç‚ôÇÔ∏è). –Ø –Ω–∞–¥–∞—é —Ç–æ–±—ñ –ø—ñ–¥–∫–∞–∑–∫–∏, —è–∫–∏–º —á–∏–Ω–æ–º –±—É–¥–µ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç–∏ —Å–ª–æ–≤–æ, —è–∫–µ —î –Ω–∞ —á–µ—Ä–∑—ñ. \n–ö–æ–ª–∏ —Ç–∏ —ó—Ö –≤–∏–∫–æ–Ω–∞—î—à —ñ —Ç—ñ–ª—å–∫–∏ —Ç–æ–¥—ñ, —Ç–∏ –º–æ–∂–µ—à –≤–∫–∞–∑–∞—Ç–∏, —â–æ —É—Å–ø—ñ—à–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏–≤ —Å–ª–æ–≤–æ (—Ç–æ–±—Ç–æ –Ω–∞–∂–∞—Ç–∏ True‚ù§Ô∏è). \n–Ø–∫—â–æ –∂ —Ç–∏ —Å–ª–æ–≤–æ –Ω–µ –∑–≥–∞–¥–∞–≤, –¥–æ—Ç—Ä–∏–º—É–π—Å—è –ø—ñ–¥–∫–∞–∑–æ–∫ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è, —ñ –≤–∏–±–µ—Ä–∏ Falseüíî.'
        )

    else:
        bot.send_message(
            chat_id,
            '–°—å–æ–≥–æ–¥–Ω—ñ –Ω–µ–º–∞—î —Å–ª—ñ–≤ –¥–ª—è –≤–∏–≤—á–µ–Ω–Ω—è :( \n–ü–æ–≤–µ—Ä—Ç–∞–π—Å—è –∑–∞–≤—Ç—Ä–∞ –∞–±–æ –ø–µ—Ä–µ–≥–ª—è–Ω—å —É—Å—ñ —Å–ª–æ–≤–∞, —è–∫—ñ —Ç–∏ –≤–∏–≤—á–∞—î—à :)'
        )


'''–ü–û–ß–ê–¢–ò –í–ò–í–ß–ï–ù–ù–Ø –°–õ–Ü–í –ù–ê –°–¨–û–ì–û–î–ù–Ü'''


@bot.message_handler(commands=['start_rep_word'])
def start_repeat_words(message):
    id_user(message)
    insert(message)
    curr_date()
    cursor.execute(f'SELECT new_words, data_next_rep FROM {idn}')
    complete = cursor.fetchall()
    # worder –∫–æ–ø—ñ—è —â–æ–± wordso –∑–∞–ª–∏—à–∏–ª–æ—Å—å —Ü—ñ–ª–∏–º, —ñ –º–æ–∂–Ω–∞ –±—É–ª–æ –≤–∏–≤–µ—Å—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—Ö —Å–ª—ñ–≤.
    global selected_words, worder
    selected_words = []
    for row in complete:
        db_date = datetime.datetime.strptime(
            row[1], "%d/%m/%Y")  # –ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä—è–¥–∫–∞ —É datetime
        if db_date <= current_date:
            selected_words.append(row[0])
    if complete:
        worder = selected_words.copy()
        bot.send_message(
            chat_id,
            '–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è: –Ø–∫—â–æ —Ç–∏ –ø–∞–º º—è—Ç–∞—î—à –ø–µ—Ä–µ–∫–ª–∞–¥ —Ü—å–æ–≥–æ —Å–ª–æ–≤–∞ –Ω–∞–ø–∏—à–∏ 4 —Ä–µ—á–µ–Ω–Ω—è –∑ –Ω–∏–º. (///beta_text!///)'
        )
        foo(message)
    else:
        bot.send_message(
            chat_id, '–¢–∏ —â–µ –Ω–µ –¥–æ–¥–∞–≤ –∂–æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞, —è–∫–µ –º–æ–∂–Ω–∞ –ø–æ—á–∞—Ç–∏ –≤—á–∏—Ç–∏.')


stat_false = []


def foo(message):
    global one_word, stat_false
    #–¥–ª—è –∑–∞–ø–∏—Å—É —Å–∫—ñ–ª—å–∫–∏ –Ω–µ–∑–≥–∞–¥–∞–≤ —ñ —Å–∫—ñ–ª—å–∫–∏ –∑–≥–∞–¥–∞–≤

    if len(worder) == 0:
        bot.send_message(
            chat_id,
            f'–ú–æ–ª–æ–¥–µ—Ü—å! –¢–∏ —á—É–¥–æ–≤–æ –ø–æ—Å—Ç–∞—Ä–∞–≤—Å—è. –°—å–æ–≥–æ–¥–Ω—ñ —Ç–∏ –ø–æ–≤—Ç–æ—Ä–∏–≤ {str(len(selected_words))} —Å–ª—ñ–≤ü•≥ \n{str(len(selected_words) - len(stat_false))} —Å–ª–æ–≤–∞ —Ç–∏ –∑–≥–∞–¥–∞–≤ —Ç–∞ {str(len(stat_false))} –Ω–µ –∑–≥–∞–¥–∞–≤. \n–ß–µ–∫–∞—é —Ç–µ–±–µ –∑–∞–≤—Ç—Ä–∞ –∞–±–æ –≤ –±—É–¥—å-—è–∫–∏–π —ñ–Ω—à–∏–π —á–∞—Å‚ù§Ô∏è'
        )
        del one_word
        del stat_false
        return
    elif len(selected_words):
        button = types.InlineKeyboardMarkup()
        button.add(types.InlineKeyboardButton('True‚ù§Ô∏è', callback_data='true'))
        button.add(types.InlineKeyboardButton('Falseüíî', callback_data='false'))

        one_word = worder.pop(0)
        bot.send_message(chat_id,
                         f'–ß–∏ –ø–∞–º º—è—Ç–∞—î—à —Ç–∏ —Ü–µ —Å–ª–æ–≤–æ? \n\n<b>{one_word}</b>',
                         parse_mode='html',
                         reply_markup=button)
        if message.text.lower() == 'end':
            bot.send_message(
                chat_id,
                f'–ú–æ–ª–æ–¥–µ—Ü—å! –¢–∏ —á—É–¥–æ–≤–æ –ø–æ—Å—Ç–∞—Ä–∞–≤—Å—è. –°—å–æ–≥–æ–¥–Ω—ñ —Ç–∏ –ø–æ–≤—Ç–æ—Ä–∏–≤ {str(len(wordso))} —Å–ª—ñ–≤ü•≥ \n{str(len(selected_words) - len(stat_false))} —Å–ª–æ–≤–∞ —Ç–∏ –∑–≥–∞–¥–∞–≤ —Ç–∞ {str(len(stat_false))} –Ω–µ –∑–≥–∞–¥–∞–≤. \n–ß–µ–∫–∞—é —Ç–µ–±–µ –∑–∞–≤—Ç—Ä–∞ –∞–±–æ –≤ –±—É–¥—å-—è–∫–∏–π —ñ–Ω—à–∏–π —á–∞—Å‚ù§Ô∏è'
            )
            del one_word
            del stat_false
            return
    else:
        bot.send_message(
            chat_id, '–¢–∏ —â–µ –Ω–µ –¥–æ–¥–∞–≤ –∂–æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞, —è–∫–µ –º–æ–∂–Ω–∞ –ø–æ—á–∞—Ç–∏ –≤—á–∏—Ç–∏.')


'''–°–õ–û–í–ê, –Ø–ö–Ü –¢–ò –í–ò–í–ß–ò–í'''


@bot.message_handler(commands=['complete'])
def complete_word(message):
    id_user(message)
    insert(message)
    cursor.execute(f'SELECT new_words FROM {idn} WHERE complete_words = 1')
    complete = cursor.fetchall()
    words = [word[0] for word in complete]
    if complete:
        bot.send_message(chat_id,
                         '–û—Å—å —Å–ª–æ–≤–∞, —è–∫—ñ —Ç–∏ –í–ò–í–ß–ò–í: \n' + '\n'.join(words))
    else:
        bot.send_message(chat_id, '–ù–∞–∂–∞–ª—å —Ç–∏ —â–µ –Ω–µ –≤–∏–≤—á–∏–≤ –∂–æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞')


'''–ü–û–í–¢–û–†–ï–ù–ù–Ø –°–õ–Ü–í –ë–ï–ó –ó–ê–†–ê–•–£–í–ê–ù–ù–Ø, –ü–†–û–°–¢–û –î–õ–Ø –ü–†–û–§–Ü–õ–ê–ö–¢–ò–ö–ò!'''


@bot.message_handler(commands=['teach'])
def teach(message):
    id_user(message)
    insert(message)
    curr_date()
    cursor.execute(f'SELECT new_words FROM {idn}')
    global wordso, worder
    complete = cursor.fetchall()
    wordso = [word[0] for word in complete]
    # worder –∫–æ–ø—ñ—è —â–æ–± wordso –∑–∞–ª–∏—à–∏–ª–æ—Å—å —Ü—ñ–ª–∏–º, —ñ –º–æ–∂–Ω–∞ –±—É–ª–æ –≤–∏–≤–µ—Å—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—Ö —Å–ª—ñ–≤.
    worder = wordso.copy()
    bot.send_message(
        chat_id,
        '–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è: –Ø–∫—â–æ —Ç–∏ –ø–∞–º º—è—Ç–∞—î—à –ø–µ—Ä–µ–∫–ª–∞–¥ —Ü—å–æ–≥–æ —Å–ª–æ–≤–∞ –Ω–∞–ø–∏—à–∏ 4 —Ä–µ—á–µ–Ω–Ω—è –∑ –Ω–∏–º. (///beta_text!///)'
    )
    foos(message)


stat_false = []


def foos(message):
    global one_word, stat_false
    #–¥–ª—è –∑–∞–ø–∏—Å—É —Å–∫—ñ–ª—å–∫–∏ –Ω–µ–∑–≥–∞–¥–∞–≤ —ñ —Å–∫—ñ–ª—å–∫–∏ –∑–≥–∞–¥–∞–≤

    if message.text.lower() == 'end' or len(worder) == 0:
        bot.send_message(
            chat_id,
            f'–ú–æ–ª–æ–¥–µ—Ü—å! –¢–∏ —á—É–¥–æ–≤–æ –ø–æ—Å—Ç–∞—Ä–∞–≤—Å—è. –°—å–æ–≥–æ–¥–Ω—ñ —Ç–∏ –ø–æ–≤—Ç–æ—Ä–∏–≤ {str(len(wordso))} —Å–ª—ñ–≤ü•≥ \n{str(len(wordso) - len(stat_false))} —Å–ª–æ–≤–∞ —Ç–∏ –∑–≥–∞–¥–∞–≤ —Ç–∞ {str(len(stat_false))} –Ω–µ –∑–≥–∞–¥–∞–≤. \n–ß–µ–∫–∞—é —Ç–µ–±–µ –∑–∞–≤—Ç—Ä–∞ –∞–±–æ –≤ –±—É–¥—å-—è–∫–∏–π —ñ–Ω—à–∏–π —á–∞—Å‚ù§Ô∏è'
        )
        del one_word
        del stat_false
        return
    elif len(wordso):
        button = types.InlineKeyboardMarkup()
        button.add(types.InlineKeyboardButton('True‚ù§Ô∏è', callback_data='tru'))
        button.add(types.InlineKeyboardButton('Falseüíî', callback_data='fals'))

        one_word = worder.pop(0)
        bot.send_message(chat_id,
                         f'–ß–∏ –ø–∞–º º—è—Ç–∞—î—à —Ç–∏ —Ü–µ —Å–ª–æ–≤–æ? \n\n<b>{one_word}</b>',
                         parse_mode='html',
                         reply_markup=button)
    else:
        bot.send_message(
            chat_id, '–¢–∏ —â–µ –Ω–µ –¥–æ–¥–∞–≤ –∂–æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞, —è–∫–µ –º–æ–∂–Ω–∞ –ø–æ—á–∞—Ç–∏ –≤—á–∏—Ç–∏.')


'''CALLBACK –î–õ–Ø BCIX –ö–ù–û–ü–û–ö'''


@bot.callback_query_handler(func=lambda callback: True)
def call_message(callback):
    if callback.data == 'start_rep_word':
        start_repeat_words(info_user)

    elif callback.data == 'rep_word':
        repeat_words(callback)
    elif callback.data == 'true':
        bot.send_message(chat_id, '–ú–æ–ª–æ–¥–µ—Ü—å! –¶–µ —Å–ª–æ–≤–æ –±—É–ª–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–æ)')
        insert(callback)
        curr_date()
        cursor.execute(f'SELECT amount_of_rep FROM {idn} WHERE new_words = ?',
                       (one_word, ))
        amount_rep = []
        amount_rep.append(cursor.fetchone())
        amount_rep = [i[0] for i in amount_rep]
        next_rep = amount_rep[0] + 2
        data_next_rep = current_date + datetime.timedelta(days=next_rep)
        cursor.execute(
            f'UPDATE {idn} SET data_next_rep = ?, amount_of_rep =+ 1 WHERE new_words = ?',
            (
                data_next_rep.strftime("%d/%m/%Y"),
                one_word,
            ))
        conn.commit()
        amount_rep[0] += 1
        if amount_rep[0] == 7:
            cursor.execute(
                f'UPDATE {idn} SET data_next_rep = NULL, complete_words = 1 WHERE new_words = {one_word}'
            )
            bot.send_message(chat_id, 'üéâ–í—ñ—Ç–∞—é, —Ç–∏ –≤–∏–≤—á–∏–≤ —Ü–µ —Å–ª–æ–≤–æ ü•≥ü•á')
            conn.commit()
        foo(callback.message)
    elif callback.data == 'false':
        bot.send_message(
            chat_id,
            '–©–æ –∂, —á–∏–º –±—ñ–ª—å—à–µ —Ç–∏ –ø–æ–º–∏–ª—è—î—à—Å—è, —Ç–∏–º –∫—Ä–∞—â–∏–º –±—É–¥–µ –∫—ñ–Ω—Ü–µ–≤–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.'
        )
        worder.insert(len(worder) - 1, one_word)
        #–î–æ–¥–∞—Ç–∏ —Ü—ñ–ª—ñ —Å–ª–æ–≤–∞, –∞–±–∏ –ø–æ—Ç—ñ–º –¥–æ–¥–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—é –ø–µ—Ä–µ–≥–ª—è–¥—É, —è–∫—ñ —Å–ª–æ–≤–∞ –∑–≥–∞–¥–∞–≤, –∞ —è–∫—ñ –Ω—ñ
        if one_word not in stat_false:
            stat_false.append(one_word)
        foo(info_user)
    elif callback.data == 'tru':
        bot.send_message(chat_id, '–ú–æ–ª–æ–¥–µ—Ü—å! –¶–µ —Å–ª–æ–≤–æ –±—É–ª–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–æ‚ù§Ô∏è')
        foos(info_user)
    elif callback.data == 'fals':
        bot.send_message(
            chat_id,
            '–©–æ –∂, —á–∏–º –±—ñ–ª—å—à–µ —Ç–∏ –ø–æ–º–∏–ª—è—î—à—Å—è, —Ç–∏–º –∫—Ä–∞—â–∏–º –±—É–¥–µ –∫—ñ–Ω—Ü–µ–≤–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.'
        )
        worder.insert(len(worder) - 1, one_word)
        if one_word not in stat_false:
            stat_false.append(one_word)
        foos(info_user)
    elif callback.data == 'data':
        daily_photo(info_user)
    elif callback.data == 'repeat':
        repeat(info_user)
    elif callback.data == 'teach':
        teach(info_user)
    elif callback.data in numbers:
        repeat_data(info_user, callback.data)
    elif callback.data == 'english':
        english_form(info_user)
    elif callback.data == 'words':
        words(info_user)
    elif callback.data == 'learn':
        new_words(info_user)
    elif callback.data == 'added_today':
        show_words(info_user)


# –ù–ê–ü–ò–°–ê–¢–ò –°–õ–û–í–ê, –Ø–ö–Ü –¢–ò –í–ò–í–ß–ò–í
@bot.callback_query_handler(func=lambda callback: callback.data == 'completo')
def callback_insert(callback):
    bot.send_message(chat_id, '–í–≤–µ–¥—ñ—Ç—å –≤–∏–≤—á–µ–Ω–µ —Å–ª–æ–≤–æ: ')
    bot.register_next_step_handler(callback.message, iii)


def iii(message):
    if message.text == 'end':
        show_words(message)
    else:
        insert(message)
        cursor.execute(
            f'SELECT complete_words FROM {idn} WHERE complete_words = ?',
            (message.text, ))
        existing_word = cursor.fetchone()

        if existing_word:
            bot.send_message(chat_id,
                             f'–°–ª–æ–≤–æ "{message.text}" –≤–∂–µ —î –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö.')
        else:
            cursor.execute(
                f'INSERT INTO {idn} (complete_words, data_new_words) VALUES (?, ?)',
                (message.text, ))
            conn.commit()
        bot.send_message(chat_id, '–°–ª–æ–≤–æ —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ')
        bot.send_message(chat_id, '–í–≤–µ–¥—ñ—Ç—å –≤–∏–≤—á–µ–Ω–µ —Å–ª–æ–≤–æ: ')
        bot.register_next_step_handler(message, iii)


# callback –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤ repeat()
def repeat_data(message, data):
    keyboard = types.InlineKeyboardMarkup()
    named = ['Programing', 'English', 'Mental']
    for i in range(3):
        keyboard.add(
            types.InlineKeyboardButton(named[i],
                                       callback_data=named[i].lower()))
    bot.send_message(chat_id,
                     f'–í–∏–±–µ—Ä–∏ —Ç–µ–º—É –∑–∞ <b>{str(data)}.10</b>: ',
                     reply_markup=keyboard,
                     parse_mode='html')


@bot.message_handler(commands=['info'])
def info(message):
    id_user(message)
    bot.send_message(chat_id, '///–§—É–Ω–∫—Ü—ñ—è –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ///')


@bot.message_handler(commands=['future'])
def future(message):
    id_user(message)
    bot.send_message(
        chat_id,
        '1. –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è-–Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –Ω–∞–≤—á–∞–Ω–Ω—è.\n2. –ú–æ–∂–ª–∏–≤—ñ—Å—Ç—å –≤—ñ–¥–∫–ª–∞–¥–∞—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è.\n3. touch –¥–ª—è —Å–ª—ñ–≤, —è–∫—ñ –º–æ–∂–Ω–∞ –æ–∫—Ä–µ–º–æ –≤–∏–±—Ä–∞—Ç–∏.\n4. –ú–æ–∂–ª–∏–≤—ñ—Å—Ç—å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–ª–∞—Å–Ω–∏—Ö —Ü—ñ–ª–µ–π.\n5. –ú–æ–∂–ª–∏–≤—ñ—Å—Ç—å –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Å–ª—ñ–≤ –∑ –Ω–∞–≤—á–∞–Ω–Ω—è.\n6. –û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É (–ó–∞–º—ñ—Å—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –±—É–¥–µ –∑–∞–º—ñ–Ω—é–≤–∞—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—î.'
    )


bot.infinity_polling()
